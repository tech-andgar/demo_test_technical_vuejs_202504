name: Build and Deploy to GitHub Pages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:


permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.repo-name.outputs.REPO_NAME }}
      cache_hit: ${{ steps.cache-node-modules.outputs.cache-hit }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Get repository name
      id: repo-name
      run: echo "REPO_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2)" >> $GITHUB_OUTPUT

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 8

    - name: Setup Node with pnpm cache
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml

    - name: Cache node_modules
      id: cache-node-modules
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/pnpm-lock.yaml') }}

    - name: Install Dependencies
      working-directory: ./frontend
      run: pnpm install

  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 8

    - name: Setup Node with pnpm cache
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml

    - name: Restore node_modules
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Install Dependencies if Needed
      working-directory: ./frontend
      run: |
        if [ ! -d "node_modules" ]; then
          echo "node_modules not found, installing dependencies..."
          pnpm install
        fi

    - name: Restore Vitest Cache
      id: cache-vitest-restore
      uses: actions/cache@v3
      with:
        path: |
          frontend/node_modules/.vitest
        key: ${{ runner.os }}-vitest-${{ hashFiles('frontend/**/*.ts', 'frontend/**/*.vue', 'frontend/**/*.js') }}
        restore-keys: |
          ${{ runner.os }}-vitest-

    - name: Run Tests
      working-directory: ./frontend
      run: pnpm run test:unit

    - name: Save Vitest Cache
      uses: actions/cache/save@v3
      with:
        path: |
          frontend/node_modules/.vitest
        key: ${{ runner.os }}-vitest-${{ hashFiles('frontend/**/*.ts', 'frontend/**/*.vue', 'frontend/**/*.js') }}

    - name: Run Type Check
      working-directory: ./frontend
      run: pnpm run type-check

  build:
    needs: [ setup, test ]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 8

    - name: Setup Node with pnpm cache
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml

    - name: Restore node_modules
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('frontend/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Install Dependencies if Needed
      working-directory: ./frontend
      run: |
        if [ ! -d "node_modules" ]; then
          echo "node_modules not found, installing dependencies..."
          pnpm install
        fi

    - name: Restore Vite Build Cache
      id: cache-vite-restore
      uses: actions/cache@v3
      with:
        path: |
          frontend/node_modules/.vite
        key: ${{ runner.os }}-vite-build-${{ hashFiles('frontend/**/*.ts', 'frontend/**/*.vue', 'frontend/**/*.js') }}
        restore-keys: |
          ${{ runner.os }}-vite-build-

    - name: Update vite.config.ts
      working-directory: ./frontend
      run: |
        sed -i.bak "s|base: '/full-stack-challenge/'|base: '/${{ needs.setup.outputs.repo_name }}/'|g" vite.config.ts

    - name: Build
      working-directory: ./frontend
      run: pnpm run build
      env:
        BASE_URL: '/${{ needs.setup.outputs.repo_name }}/'

    - name: Save Vite Build Cache
      uses: actions/cache/save@v3
      with:
        path: |
          frontend/node_modules/.vite
        key: ${{ runner.os }}-vite-build-${{ hashFiles('frontend/**/*.ts', 'frontend/**/*.vue', 'frontend/**/*.js') }}

    - name: Create .nojekyll file
      run: touch frontend/dist/.nojekyll

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './frontend/dist'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
